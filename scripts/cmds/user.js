this.config = {
	name: "user",
	version: "1.0.4",
	author: {
		name: "NTKhang",
		contacts: ""
	},
	cooldowns: 5,
	role: 2,
	shortDescription: "Qu·∫£n l√Ω ng∆∞·ªùi d√πng",
	longDescription: "Qu·∫£n l√Ω ng∆∞·ªùi d√πng trong h·ªá th·ªëng bot",
	category: "owner",
	guide: "{prefix}user [find | -f | search | -s] <t√™n c·∫ßn t√¨m>: t√¨m ki·∫øm ng∆∞·ªùi d√πng trong d·ªØ li·ªáu bot b·∫±ng t√™n"
		+ "\n"
		+ "\n{prefix}user [ban | -b] [<id> | @tag | reply tin nh·∫Øn] <reason>: ƒë·ªÉ c·∫•m ng∆∞·ªùi d√πng mang id <id> ho·∫∑c ng∆∞·ªùi ƒë∆∞·ª£c tag ho·∫∑c ng∆∞·ªùi g·ª≠i c·ªßa tin nh·∫Øn ƒë∆∞·ª£c reply s·ª≠ d·ª•ng bot"
		+ "\n"
		+ "\n{prefix}user unban [<id> | @tag | reply tin nh·∫Øn]: ƒë·ªÉ b·ªè c·∫•m ng∆∞·ªùi d√πng s·ª≠ d·ª•ng bot"
};

module.exports = {
	config: this.config,
	start: async function ({ api, args, usersData, message, client, event, setup }) {
		const moment = require("moment-timezone");
		const type = args[0];
		// find user
		if (["find", "search", "-f", "-s"].includes(type)) {
			const allUser = await usersData.getAll(["name"]);
			const keyword = args.slice(1).join(" ");
			const result = allUser.filter(item => (item.name || "").toLowerCase().includes(keyword.toLowerCase()));
			const msg = result.reduce((i, user) => i += `\n‚ï≠Name: ${user.name}\n‚ï∞ID: ${user.id}`, "");
			message.reply(result.length == 0 ? `‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†o c√≥ t√™n kh·ªõp v·ªõi t·ª´ kh√≥a: ${keyword}` : `üîéC√≥ ${result.length} k·∫øt qu·∫£ ph√π h·ª£p cho t·ª´ kh√≥a "${keyword}":\n${msg}`);
		}
		// ban user
		else if (["ban", "-b"].includes(type)) {
			let id, reason;
			if (event.type == "message_reply") {
				id = event.messageReply.senderID;
				reason = args.slice(1).join(" ");
			}
			else if (Object.keys(event.mentions).length > 0) {
				const { mentions } = event;
				id = Object.keys(mentions)[0];
				reason = args.slice(1).join(" ").replace(mentions[id], "");
			}
			else if (args[1]) {
				id = args[1];
				reason = args.slice(2).join(" ");
			}
			else return message.SyntaxError();

			if (!id) return message.reply("Id c·ªßa ng∆∞·ªùi c·∫ßn ban kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng, vui l√≤ng nh·∫≠p id ho·∫∑c tag ho·∫∑c reply tin nh·∫Øn c·ªßa 1 ng∆∞·ªùi theo c√∫ ph√°p user ban <id> <l√Ω do>");
			if (!reason) return message.reply("L√Ω do c·∫•m ng∆∞·ªùi d√πng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng, vui l√≤ng so·∫°n tin nh·∫Øn theo c√∫ ph√°p user ban <id> <l√Ω do>");
			if (!client.allUserData[id]) return message.reply(`Ng∆∞·ªùi d√πng mang id ${id} kh√¥ng t·ªìn t·∫°i trong d·ªØ li·ªáu bot`);
			reason = reason.replace(/\s+/g, ' ');

			const userData = await usersData.getData(id);
			const name = userData.name;
			const status = userData.banned.status;

			if (status) return message.reply(`Ng∆∞·ªùi d√πng mang id [${id} | ${name}] ƒë√£ b·ªã c·∫•m t·ª´ tr∆∞·ªõc:\n> L√Ω do: ${userData.banned.reason}\n> Th·ªùi gian: ${userData.banned.date}`);
			const time = moment.tz("Asia/Ho_Chi_Minh").format("DD/MM/YYYY HH:mm:ss");
			await usersData.setData(id, {
				banned: {
					status: true,
					reason,
					date: time
				}
			}, (err) => {
				if (err) return message.reply(`ƒê√£ x·∫£y ra l·ªói ${err.name}: ${err.message}`);
				else return message.reply(`ƒê√£ c·∫•m ng∆∞·ªùi d√πng mang id [${id} | ${name}] s·ª≠ d·ª•ng bot.\n> L√Ω do: ${reason}\n> Th·ªùi gian: ${time}`);
			});
		}
		// unban user
		else if (["unban", "-u"].includes(type)) {
			let id;
			if (event.type == "message_reply") {
				id = event.messageReply.senderID;
			}
			else if (Object.keys(event.mentions).length > 0) {
				const { mentions } = event;
				id = Object.keys(mentions)[0];
			}
			else if (args[1]) {
				id = args[1];
			}
			else return message.SyntaxError();
			if (!id) return message.reply("Id c·ªßa ng∆∞·ªùi c·∫ßn unban kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng, vui l√≤ng nh·∫≠p id ho·∫∑c tag ho·∫∑c reply tin nh·∫Øn c·ªßa 1 ng∆∞·ªùi theo c√∫ ph√°p user unban");
			if (!client.allUserData[id]) return message.reply(`Ng∆∞·ªùi d√πng mang id ${id} kh√¥ng t·ªìn t·∫°i trong d·ªØ li·ªáu bot`);
			const userData = await usersData.getData(id);
			const name = userData.name;
			const status = userData.banned.status;
			if (!status) return message.reply(`Hi·ªán t·∫°i ng∆∞·ªùi d√πng mang id [${id} | ${name}] kh√¥ng b·ªã c·∫•m s·ª≠ d·ª•ng bot`);
			await usersData.setData(id, {
				banned: {
					status: false,
					reason: null
				}
			}, (err) => {
				if (err) return message.reply(`ƒê√£ x·∫£y ra l·ªói ${err.name}: ${err.message}`);
				else message.reply(`ƒê√£ b·ªè c·∫•m ng∆∞·ªùi d√πng mang id [${id} | ${name}], hi·ªán t·∫°i ng∆∞·ªùi n√†y c√≥ th·ªÉ s·ª≠ d·ª•ng bot`);
			});
		}
		else return message.SyntaxError();
	}
};
