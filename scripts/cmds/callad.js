this.config = {
	name: "callad",
	version: "1.0.2",
	author: {
		name: "NTKhang",
		contacts: ""
	},
	cooldowns: 5,
	role: 0,
	shortDescription: "g·ª≠i b√°o c√°o v·ªÅ admin bot",
	longDescription: "g·ª≠i b√°o c√°o, g√≥p √Ω, b√°o l·ªói,... c·ªßa b·∫°n v·ªÅ admin bot",
	category: "contacts admin",
	guide: "{prefix}{name} <tin nh·∫Øn>"
};

module.exports = {
	config: this.config,
	start: async function ({ globalGoat, args, message, api, event, usersData, threadsData }) {
		if (!args[0]) return message.reply("Please enter the message you want to send to admin");
		const { senderID, threadID, isGroup } = event;

		const userData = await usersData.getData(senderID);
		const nameSender = userData.name;
		let msg = "==üì®Ô∏è Report üì®Ô∏è=="
			+ `\n${userData.gender == 2 ? "üöπ" : "üö∫"} Name: ${nameSender}`
			+ `\nüÜî User ID: ${senderID}`;

		msg += `\nüë®‚Äçüë©‚Äçüëß‚Äçüë¶ T·ª´ ` + (isGroup ? `nh√≥m: ${(await threadsData.getData(threadID)).name}`
			+ `\nüÜî Thread ID: ${threadID}` : "individual");

		api.sendMessage({
			body: msg + `\nüÜé Content: ${args.join(" ")}\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nRespond to this message to send a message back to the user`,
			mentions: [{
				id: senderID,
				tag: nameSender
			}]
		}, globalGoat.config.adminBot[0], (err, info) => {
			if (err) return message.reply(`An error has occurred: ${err.name ? err.name + " " + err.message : err.errorSummary + "\n" + err.errorDescription}`);
			message.reply("Your report has been sent to admin successfully");
			globalGoat.whenReply[info.messageID] = {
				nameCmd: this.config.name,
				messageID: info.messageID,
				messageIDSender: event.messageID,
				threadIDSender: threadID,
				type: "userCallAdmin"
			};
		});
	},

	whenReply: async ({ globalGoat, args, event, api, message, Reply, usersData }) => {
		const { messageIDSender, threadIDSender, type } = Reply;
		const nameSender = (await usersData.getData(event.senderID)).name;

		switch (type) {
			case "userCallAdmin":
				api.sendMessage({
					body: `üìç Response from admin ${nameSender}\n${args.join(" ")}`
						+ `\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nReply to this message to continue sending messages to admin`,
					mentions: [{
						id: event.senderID,
						tag: nameSender
					}]
				}, threadIDSender, (err, info) => {
					if (err) return message.reply(`An error has occurred: ${err.name ? err.name + " " + err.message : err.errorSummary + "\n" + err.errorDescription}`);
					globalGoat.whenReply[info.messageID] = {
						nameCmd: this.config.name,
						messageID: info.messageID,
						messageIDSender: event.messageID,
						threadIDSender: event.threadID,
						type: "adminReply"
					};
				}, messageIDSender);
				break;
			case "adminReply":
				api.sendMessage({
					body: `üìù Feedback from users ${nameSender}:`
						+ `\nüÜî: ${event.senderID}`
						+ `\nüó£Ô∏è: ${nameSender}`
						+ `\nContent:\n${args.join(" ")}`
						+ `\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nRespond to this message to send a message back to the user`,
					mentions: [{
						id: event.senderID,
						tag: nameSender
					}]
				}, threadIDSender, (err, info) => {
					if (err) return message.reply(`An error has occurred: ${err.name ? err.name + " " + err.message : err.errorSummary + "\n" + err.errorDescription}`);
					globalGoat.whenReply[info.messageID] = {
						nameCmd: this.config.name,
						messageID: info.messageID,
						messageIDSender: event.messageID,
						threadIDSender: event.threadID,
						type: "userCallAdmin"
					};
				}, messageIDSender);
				break;
			default:
				break;
		}

	}
};
